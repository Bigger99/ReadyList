@page "/validation"
@using ReadyList.Database.Models;

<div class="validation-form-wrapper">
    <div class="validation-form">

        <div class="form-title">Авторизация</div>

        <div class="from-inputs">
            <EditForm Model="@_user" OnValidSubmit="HandleValidationSubmit" OnInvalidSubmit="HandleInvalidationSubmit">
                <div class="alert @StatusClass">
                    @StatusMessage
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email" class="control-label">Email:</label>
                    <InputText id="email" @bind-Value="_user.Email" class="form-control"></InputText>
                    <ValidationMessage For="@(() => _user.Email)" />
                </div>
                <div class="form-group">
                    <label for="password" class="control-label">Password:</label>
                    <InputText id="password" @bind-Value="_user.Password" class="form-control"></InputText>
                    <ValidationMessage For="@(() => _user.Password)" />
                </div>

                <button type="submit" class="btn btn-success">Submit</button>

            </EditForm>
        </div>

        <hr/>
        <div class="form-services">
            <a href="#">
                <div class="service google-service"></div>
            </a>
            <a href="#">
                <div class="service vk-service"></div>
            </a>
            <a href="#">
                <div class="service yandex-service"></div>
            </a>
            <a href="#">
                <div class="service apple-service"></div>
            </a>
        </div>

    </div>
</div>


@code
{
    [Parameter] 
    public User User { get; set; }

    private string? StatusClass;
    private string? StatusMessage;

    private User _user = new User();

    protected void HandleValidationSubmit()
    {
        StatusMessage = "Good";
        StatusClass = "alert-info";

        User.Email = _user.Email;
        User.Password = _user.Password;

        StateHasChanged();
    }

    protected void HandleInvalidationSubmit()
    {
        StatusMessage = "Bad";
        StatusClass = "alert-danger";
    }
}
